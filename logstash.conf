input {
  file {
    #https://www.elastic.co/guide/en/logstash/current/plugins-inputs-file.html
    #default is TAIL which assumes more data will come into the file.
    #change to mode => "read" if the file is a complete file.  
    #by default, the file will be removed once reading is complete -- backup your files if you need them.
    # we will be using READ with the completed file action to log to a file.
    mode => "read"
    path => "/usr/share/logstash/ingest_data/waze/*" #specifying only csv files.
    exit_after_read => true # this tells logstash to exit after reading the file.  This is useful for running logstash as a "job". if you want logstash to continue to run and monitor for files, remove this line.
    file_completed_action => "log" # this tells logstash to log to the file specified in file_completed_log_path once its done reading the input file.
    file_completed_log_path => "/usr/share/logstash/ingest_data/logstash_completed.log"
  }
}

filter {
  csv {
    separator => ","
    columns => ["street", "id", "incident_type", "country", "waze_data", "city"]
    skip_empty_columns => true
  }

  mutate {
    strip => ["street", "incident_type", "country", "city"]
    remove_field => ["message"]
  }

  # Filtro grok para extraer coordenadas
  mutate {
    gsub => [
      "waze_data", "\\x", "",
      "waze_data", "\\y", "",
      "waze_data", '\\"', "", 
      "waze_data", "{", "",
      "waze_data", "}", ""
    ]
  }

  # Manejo de errores si grok falla (¡aquí es donde va!)
  if "_grokparsefailure" in [tags] {
  # Intentar extraer coordenadas manualmente para este formato específico
    grok {
      match => { "waze_data" => "%{NUMBER:_ignore},%{NUMBER:longitude},%{NUMBER:latitude}" }
      overwrite => ["longitude", "latitude"]
    }
  
  # Si aún falla, marcar para revisión
    if "_grokparsefailure" in [tags] {
      mutate {
        add_tag => ["needs_review"]
        remove_field => ["longitude", "latitude"]
      }
    }
  }

  # Resto de filtros (dependen de longitude/latitude)
  mutate {
    convert => {
      "longitude" => "float"
      "latitude" => "float"
    }
  }

  mutate {
    add_field => { "[location]" => "%{latitude},%{longitude}" }
  }

  mutate {
    rename => { "incident_type" => "type" }
  }

  mutate {
  gsub => [
      "waze_data", "\\x", "",
      "waze_data", "\\y", "",
      "waze_data", '\\"', "", 
      "waze_data", "{", "",
      "waze_data", "}", ""
    ]
  }
}

output {
  elasticsearch {
    index => "logstash-%{+YYYY.MM.dd}"
    hosts=> "${ELASTIC_HOSTS}"
    user=> "${ELASTIC_USER}"
    password=> "${ELASTIC_PASSWORD}"
    cacert=> "certs/ca/ca.crt"
  }
}
